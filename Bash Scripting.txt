 **We can locate in which file location bash is by running 
   which bash
 **Then upon writing a script we usually implement in the first line
   #!/bin/bash (this is called a 'hashbang' or 'shebang', bin  is
		the case where bash is in our local machine)
   This will then be accompanied by the body of code.
   We finally run the script with:
			     bash filename
			     ./filename 
 -sed s/pattern/change/g 
	pattern will be replaced with change

 **$# accesses the length of the argument list
   $@ or $* access all the arguments 

 **Basic variables 
   careful the difference of single quotes with double quotes
   Single quotes references exactly what is inside
   Double quotes references exactly what is inside except when 
   using a $ or backticks.
   e.g. 
   var_now = "today I am bored"
    new_var = "$var_now" (this will output the variable, single quoation will not 
		          recognize the variable.)
   today = 'today's date is `date`' 
   echo $today (this opens a mini shell that will return 	
                today's date in the place of backticks)
   	** `date` would have output the same as $(date)
            check https://mywiki.wooledge.org/BashFAQ/082 for the differences 

 -Entering numeric values
	expr
	e.g. expr 1+4 (will output 5, however, expr can not handle decimal places)
	bc
	e.g. 
	echo '5 +7.5 ' | bc 
	echo 'scale = 3; 10/3' |bc (scale gives us accuracy up to 3 decimal places in this occasion)
	** we can use this with shell within a shell method
	e.g. 
	model_1 = 89.80
	model_2 = 91.12
	echo "the sum model_1 and model_2 is $(echo "$model_1 + $model"|bc )"

 -Arrays in bash
        **normal arrays
	declare -a my_array (declate without adding elements)
	my_array=(1 2 3) (create array with elements)
	echo ${my_array[@]} (prints each element of the list)
	echo ${#my_array[@]} (print the length of the list)
	echo ${my_array[0]} (print the first element)
	echo ${my_array[@]:N:M} (slicing through the array starting with N as index and considering M subsequent elements)
	my_array += (10) (append to an array)
	**associative arrays 
	e.g. 	
	declare -A city_details
	city_details=([city_name]="New York" [population]=14000000)
	echo ${city_details[city_name]}
	or 
	declare -A city_details=([city_name]="New York" [population]=14000000)
	echo ${!city_details[@]} (returns all the keys, not the value itself i.e. on this occasion the city_name, population)


	

 -Conditions 
	if [ condition ]; then 
		#some code
	else
		#some code
	fi

	**for arithmetic conditionals we can use the parenthesis structure
	e.g.
	x=10
	if (($x>5)); then 
		echo "$x is greater than 5"
	fi 
        otherwise we can use flags and the brackets notation
	e.g. 
	if [ $x -gt 5]; then 
		echo "$x is greater than 5"
	fi
	where:
	-gt(greater than)
	-ge(greater equal)
	-ne(not equal)
	-lt(less than)
	-le(less equal)
	-ne(not equal)
	https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html
	**File conditionals can be used in the following way
	if grep -q 'sydney' $1; then
		mv $1 sydney/
	fi
	if grep -E -q 'melbourne|brisbane' $1; then 
		rm $1
	fi
	if grep -q 'canbera' $1; then 
		mv $1 "IMPORTANT_$1"
	fi (this is a good example where CASE can be used)
  
 -Loops
	FOR LOOPS
	for variable in argument_list
	do 
		#code
	done
	**Alternatively
	for variable in {START..STOP..INCREMENT}
	do 
		#code
	done
	**Alternatively
	for ((x=2;x<=4;x+=2))
	do 
		echo $x
	done
	**We can also once again use a shell within a shell command
	for book in $(ls books/ | grep -i 'air')
	do 
		echo $book
	done

	WHILE LOOPS 
	e.g. 
	x=1
	while [ $x -le 3 ];
	do 
		echo $x
		((x+=1))
	done	

 -CASE
	case $(cat $1) in 
	*sydney*)
	mv $1 sydney/ ;;
	*melbourne*|*brisbann*)
	rm $1 ;;
	*canberra*)
	mv $1 "IMPORTANT_$1" ;;
	*)
	echo 'No cities found' ;; 
	esac

 -Functions 
	e.g. 
	print_hello() {
		echo 'Hello World'
	}
	print_hello (call the funtion)
	e.g. 
	function print_filename {
		echo "The first file is $1"
		for file in $@
		do 
			echo $file
		done 
	}
	print_filename "seasonal/spring.csv" "seasonal/summer.csv" "seasonal/autumn.csv"
	e.g.
	function convert_temp{
		echo $(echo "scale =2; ($1 - 32) * 5 / 9 ")| bc
	}
	echo "The temp of 30F is in C $(convert_temp 30)"

 -Scheduling execution of scripts (no need to press any buttons with your finger)
	**Here what is useful is Cron; in Cron we can find something called
	  a crontab which is a file containing cronjobs. Each cronjob will 
	  then tell crontab what code to run and when. 
	crontab -l (check the schedules for running code)
	*****
	first_star:  checks the minutes
	second_star: checks the hour
	third_star:  checks the day of the month 
	fourth_star: checks the month  	
	fifth_star:  checks the day of the week
	e.g. 
	51*** bash my_script.sh (this will run the script at 1.05 every day)
	15,30,45**** (will run the script in time intervals i.e. each 15, 30, 45 minutes for every hours every day)
	*/15****    (will with an increment of 15 minutes for every hour every day)
	**Create a crontab  schedule
		1. crontab -e (edit the list of cronjobs)
		2. create a cronjob: open a text editor (nano) and store the time 
		e.g.  301*** extract_data.sh
		3. check the correctdness of the cronjob by running crontab -l 


		
	



	
	


	


 	






	